package com.test; // Updated package to match the test structure

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.entity.UserEntity;
import com.service.UserService;
import com.controller.UserController;

class UserControllerTest {

    @Mock
    private UserService userService;

    @InjectMocks
    private UserController userController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);  // Initialize mocks
    }

    @Test
    void testRegisterUser_Success() {
        // Prepare mock data
        UserEntity user = new UserEntity();
        user.setEmail("testuser@example.com");

        // Mock service behavior
        when(userService.registerUser(any(UserEntity.class))).thenReturn(user);

        // Call the method to test
        String response = userController.registerUser(user);

        // Assert the response
        assertEquals("User registered successfully", response);

        // Verify the interaction with the service
        verify(userService, times(1)).registerUser(user);
    }

    @Test
    void testRegisterUser_UserAlreadyExists() {
        // Prepare mock data
        UserEntity user = new UserEntity();
        user.setEmail("testuser@example.com");

        // Mock service behavior to throw an exception
        when(userService.registerUser(any(UserEntity.class))).thenThrow(new RuntimeException("User already exists"));

        // Call the method and check the response
        String response = userController.registerUser(user);

        // Assert the response
        assertEquals("User already exists", response);

        // Verify the interaction with the service
        verify(userService, times(1)).registerUser(user);
    }
}
