package com.test; // Updated package to match the test structure

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.entity.UserEntity;
import com.service.AuthService;
import com.dao.UserDao;

class AuthServiceTest {

    @Mock
    private UserDao userDao;

    @InjectMocks
    private AuthService authService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);  // Initialize mocks
    }

    @Test
    void testLogin_Success() {
        // Prepare mock data
        String email = "testuser@example.com";
        String password = "password";

        // Assume the password is hashed
        UserEntity user = new UserEntity();
        user.setEmail(email);
        user.setPassword("$2a$10$DowJonesPasswordHash"); // Assume a bcrypt hash

        // Mock the behavior of userDao
        when(userDao.findByEmail(email)).thenReturn(Optional.of(user));

        // Call the method to test
        String result = authService.login(email, password);

        // Assert the response
        assertEquals("Login successful", result);

        // Verify that the method was called
        verify(userDao, times(1)).findByEmail(email);
    }

    @Test
    void testLogin_Failure_WrongPassword() {
        // Prepare mock data
        String email = "testuser@example.com";
        String password = "wrongpassword";

        // Assume the password is hashed
        UserEntity user = new UserEntity();
        user.setEmail(email);
        user.setPassword("$2a$10$DowJonesPasswordHash"); // Assume a bcrypt hash

        // Mock the behavior of userDao
        when(userDao.findByEmail(email)).thenReturn(Optional.of(user));

        // Call the method to test
        String result = authService.login(email, password);

        // Assert the response
        assertEquals("Invalid credentials", result);

        // Verify that the method was called
        verify(userDao, times(1)).findByEmail(email);
    }

    @Test
    void testLogin_Failure_UserNotFound() {
        // Prepare mock data
        String email = "testuser@example.com";
        String password = "password";

        // Mock the behavior of userDao
        when(userDao.findByEmail(email)).thenReturn(Optional.empty());

        // Call the method to test
        String result = authService.login(email, password);

        // Assert the response
        assertEquals("Invalid credentials", result);

        // Verify that the method was called
        verify(userDao, times(1)).findByEmail(email);
    }
}
